1.按位或运算符“|”是双目运算符。例如：9|5 可写算式如下：
00001001
|00000101
00001101

2.按位与运算符"&"是双目运算符。
例如：9&5 可写算式如下：
00001001 
&00000101 
00000001

3.按位异或运算符“^”是双目运算符。例如 9^5 可写成算式如下：
00001001
^00000101
00001100

4.取反。~

5.左移运算符“<<”是双目运算符。例如：a<<4指把 a 的各二进位向左移动 4 位。
如 a=00000011(十进制 3)，左移 4 位后为 00110000(十进制 48)。 右移同理。

无操作系统时的 LED 驱动
#define reg_gpio_ctrl *(volatile int *)(ToVirtual(GPIO_REG_CTRL))          /*  volatile提醒编译器它后面所定义的变量随时都有可能改变 */
#define reg_gpio_data *(volatile int *)(ToVirtual(GPIO_REG_DATA))

/*ToVirtual()等函数的作用是当系统启动了硬件 MMU之后，根据物理地址和虚拟地址的映射关系，将寄存器的物理地址转化为虚拟地址。*/

/*初始化 LED*/
void LightInit(void)
{
reg_gpio_ctrl |= (1 << n); /*设置 GPIO 为输出*/
}

/*点亮 LED*/
void LightOn(void)
{
reg_gpio_data |= (1 << n); /*在 GPIO 上输出高电平*/
}

/*熄灭 LED*/
void LightOff(void)
{
reg_gpio_data &= ~(1 << n); /*在 GPIO 上输出低电平*/
}


有关const
常量指针是指针指向的内容是常量，可以有一下两种定义方式。

const int * n;
int const * n;
需要注意的是一下两点：

1、常量指针说的是不能通过这个指针改变变量的值，但是还是可以通过其他的引用来改变变量的值的。

int a=5;
const int* n=&a;
a=6;
2、常量指针指向的值不能改变，但是这并不是意味着指针本身不能改变，常量指针可以指向其他的地址。

int a=5;
int b=6;
const int* n=&a;
n=&b;
指针常量是指指针本身是个常量，不能在指向其他的地址，写法如下：

int *const n;
需要注意的是，指针常量指向的地址不能改变，但是地址中保存的数值是可以改变的，可以通过其他指向改地址的指针来修改。

int a=5;
int *p=&a;
int* const n=&a;
*p=8;
区分常量指针和指针常量的关键就在于星号的位置，我们以星号为分界线，如果const在星号的左边，则为常量指针，如果const在星号的右边则为指针常量。如果我们将星号读作‘指针’，将const读作‘常量’的话，内容正好符合。int const * n；是常量指针，int *const n；是指针常量。


